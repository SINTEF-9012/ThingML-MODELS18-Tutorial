import "lib/_Timer.thingml"
import "Display.thingml"
import "Sound.thingml"
import "Controller.thingml"

thing Game includes TimerMsgs, DisplayMsgs, SoundMsgs, ControllerMsgs {
	

	required port clock {
		sends timer_start
		receives timer_timeout
	}

	optional required port Sound
	@sync_send "true"
	{
		sends tone
	}

	required port display
	@sync_send "true"
	{
		receives displayReady, displayError
		sends create, fillRect, drawRect, clear, setColor, setBGColor, drawInteger, update, drawThingML, drawTrophy, drawPoop
		sends drawThingMLSmall
	}

	message Point(left_pad : Boolean)
	internal port Scores {
		sends Point
		receives Point
	}
	
	required port LeftController {
		receives Velocity
	}
	required port RightController {
		receives Velocity
	}
	
	// Game settings
	readonly property PERIOD : Int16 = 33 // 30 FPS
	readonly property SCORE_TO_WIN : UInt8 = 3
	property pad_left_score : UInt8 = 0
	property pad_right_score : UInt8 = 0

	// Size of the real display
	readonly property XDISPSIZE : UInt8 = 160
	readonly property YDISPSIZE : UInt8 = 128

	// Virtual size of the "game area"
	readonly property SCALE : Int16 = 64
	readonly property XMAX 	: Int16 = XDISPSIZE * SCALE
	readonly property YMAX 	: Int16 = YDISPSIZE * SCALE
	
	// Walls around the play area
	readonly property TOP 	: Double = 14 * SCALE 		// Leave 12 pixels on the top for scores
	readonly property BOTTOM	: Double = YMAX - 1 * SCALE	// One pixel for the bottom wall
	readonly property LEFT	: Double = 1 * SCALE		// One pixel from the left
	readonly property RIGHT	: Double = XMAX - 1 * SCALE	// One pixel from the right
	
	// Colors
	property bgcolor : UInt8[3]
	property fgcolor : UInt8[3]
	
	// Pad positions
	readonly property PAD_WIDTH : Double = 4 * SCALE
	readonly property PAD_HEIGHT : Double = 20 * SCALE
	property pad_left_x : Double = LEFT + PAD_WIDTH/2
	property pad_left_y : Double = (TOP+BOTTOM)/2
	property pad_left_dy : Int16 = 0
	property pad_right_x : Double = RIGHT - PAD_WIDTH/2
	property pad_right_y : Double = (TOP+BOTTOM)/2
	property pad_right_dy : Int16 = 0
	
	// Ball
	readonly property BALL_SIZE : Double = 4 * SCALE
	readonly property BALL_INITIAL_OFFSET : Double = 10 * SCALE
	readonly property BALL_INITIAL_SPEED : Double = 300
	property ball_x : Double = (LEFT+RIGHT)/2 + BALL_INITIAL_OFFSET
	property ball_y : Double = (TOP+BOTTOM)/2
	property ball_dx : Double = BALL_INITIAL_SPEED
	property ball_dy : Double = 0
	
	// Sound
	readonly property TONE_PAD : UInt16 = 440 //Hz
	readonly property TONE_WALL: UInt16 = 880  //Hz
	readonly property TONE_DURATION : UInt16 = 50 //ms
	
	function initColors() do
		bgcolor[0] = 53 	bgcolor[1] = 40 	bgcolor[2] = 120
		fgcolor[0] = 107 	fgcolor[1] = 94 	fgcolor[2] = 174
		display!setBGColor(bgcolor[0],bgcolor[1],bgcolor[2])
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
	end
	
	function drawBackground() do
		display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
		display!fillRect(0,0,XDISPSIZE, YDISPSIZE)
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		display!fillRect(0,0,XDISPSIZE,14)
	end
	
	function drawWalls() do
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		// Top and bottom walls
		fillScaledRect(0, TOP-1*SCALE, XDISPSIZE*SCALE, 1*SCALE)
		fillScaledRect(0, BOTTOM, XDISPSIZE*SCALE, 1*SCALE)
		// Dashed line
		var y : Double = TOP+2*SCALE
		var x : Double = XDISPSIZE*SCALE/2-1*SCALE
		while (y < BOTTOM-2*SCALE) do
			fillScaledRect(x, y, 1*SCALE, 2*SCALE)
			y = y + 4*SCALE
		end
	end
	
	function drawPong(x : UInt8, y : UInt8) do
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		// P
		display!fillRect(x+0,y+0,7,25)
		display!fillRect(x+7,y+0,14,4)
		display!fillRect(x+7,y+14,14,4)
		display!fillRect(x+17,y+4,7,10)
		// O
		display!fillRect(x+30,y+0,18,4)
		display!fillRect(x+27,y+4,7,17)
		display!fillRect(x+44,y+4,7,17)
		display!fillRect(x+30,y+21,18,4)
		// N
		display!fillRect(x+54,y+0,7,25)
		display!fillRect(x+61,y+4,4,11)
		display!fillRect(x+65,y+7,3,11)
		display!fillRect(x+68,y+10,4,11)
		display!fillRect(x+72,y+0,7,25)
		// G
		display!fillRect(x+88,y+0,18,4)
		display!fillRect(x+84,y+4,8,4)
		display!fillRect(x+81,y+8,7,9)
		display!fillRect(x+84,y+17,8,4)
		display!fillRect(x+95,y+11,11,4)
		display!fillRect(x+99,y+15,7,6)
		
		display!fillRect(x+88,y+21,18,4)
	end
	
	function fillScaledRect(x : Double, y : Double, width : Double, height : Double) do
		// FIXME: Should be able to cast to whatever!?
		var xs : UInt8 = (`Math.floor(`&x/SCALE&`)`) as UInt8
		var ys : UInt8 = (`Math.floor(`&y/SCALE&`)`) as UInt8
		var ws : UInt8 = (`Math.floor(`&width/SCALE&`)`) as UInt8
		var hs : UInt8 = (`Math.floor(`&height/SCALE&`)`) as UInt8
		display!fillRect(xs, ys, ws, hs)
	end
	
	function drawPad(x : Double, y : Double) do
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		fillScaledRect(x-PAD_WIDTH/2, y-PAD_HEIGHT/2, PAD_WIDTH, PAD_HEIGHT)
	end
	
	function erasePad(x : Double, y : Double) do
		display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
		fillScaledRect(x-PAD_WIDTH/2, y-PAD_HEIGHT/2, PAD_WIDTH, PAD_HEIGHT)
	end
	
	function drawBall() do
		display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
		fillScaledRect(ball_x-BALL_SIZE/2, ball_y-BALL_SIZE/2, BALL_SIZE, BALL_SIZE)
	end
	
	function eraseBall() do
		display!setColor(bgcolor[0],bgcolor[1],bgcolor[2])
		fillScaledRect(ball_x-BALL_SIZE/2, ball_y-BALL_SIZE/2, BALL_SIZE, BALL_SIZE)
	end
	
	function drawScores() do
		display!setColor(158,209,130)
		display!setBGColor(fgcolor[0],fgcolor[1],fgcolor[2])
		display!drawInteger(4, 2, pad_left_score, 2, 2)
		display!drawInteger(142, 2, pad_right_score, 2, 2)
		display!setBGColor(bgcolor[0],bgcolor[1],bgcolor[2])
	end
	
	function updatePadPositions() do
		// Left pad
		pad_left_y = pad_left_y + pad_left_dy
		if (pad_left_y - PAD_HEIGHT/2 < TOP) pad_left_y = TOP + PAD_HEIGHT/2
		if (pad_left_y + PAD_HEIGHT/2 > BOTTOM) pad_left_y = BOTTOM - PAD_HEIGHT/2
		// Right pad
		pad_right_y = pad_right_y + pad_right_dy
		if (pad_right_y - PAD_HEIGHT/2 < TOP) pad_right_y = TOP + PAD_HEIGHT/2
		if (pad_right_y + PAD_HEIGHT/2 > BOTTOM) pad_right_y = BOTTOM - PAD_HEIGHT/2
	end
	
	property right_pad_miss : Boolean = false
	property left_pad_miss : Boolean = false
	
	function updateBallPositionAndCheckCollision() do
		right_pad_miss = false
		left_pad_miss = false
	
		// Move the ball
		ball_x = ball_x + ball_dx
		ball_y = ball_y + ball_dy	
		
		// Check right side
		var pad_right_dist : Double = (ball_x+BALL_SIZE/2) - (pad_right_x-PAD_WIDTH/2)
		if (pad_right_dist >= 0) do
			// Has crossed the right paddle, check if it was within bounds
			var pad_pos : Double = (ball_y - pad_right_y + PAD_HEIGHT/2 + BALL_SIZE/2)/(PAD_HEIGHT+BALL_SIZE)
			if (pad_pos >= 0 and pad_pos <= 1) do
				// Was caught by the paddle
				reflectBallOffPaddle(pad_pos, pad_right_dy)
				// If the ball crossed the paddle, move it some extra to the left
				ball_x = ball_x - pad_right_dist
				// Play sound
				Sound!tone(TONE_PAD, TONE_DURATION)
			end
		end
		if (ball_x+BALL_SIZE/2 > RIGHT) do
			// Has completely crossed the right side, and was missed
			right_pad_miss = true
			return
		end
		
		// Check the left side
		var pad_left_dist : Double = (ball_x-BALL_SIZE/2) - (pad_left_x+PAD_WIDTH/2)
		if (pad_left_dist <= 0) do
			// Has crossed the left paddle, check if it was within bounds
			var pad_pos : Double = (ball_y - pad_left_y + PAD_HEIGHT/2 + BALL_SIZE/2)/(PAD_HEIGHT+BALL_SIZE)
			if (pad_pos >= 0 and pad_pos <= 1) do
				// Was caught by the paddle
				reflectBallOffPaddle(pad_pos, pad_left_dy)
				// If the ball crossed the paddle, move it some extra to the right
				ball_x = ball_x - pad_left_dist
				// Play sound
				Sound!tone(TONE_PAD, TONE_DURATION)
			end
		end
		if (ball_x-BALL_SIZE/2 < LEFT) do
			// Has completely crossed the left side, and was missed
			left_pad_miss = true
			return
		end
		
		// Check bottom wall
		var pad_bottom_dist : Double = (ball_y+BALL_SIZE/2) - BOTTOM
		if (pad_bottom_dist >= 0) do
			// Reflect off wall
			ball_dy = -ball_dy
			ball_y = ball_y - pad_bottom_dist
			// Play sound
			Sound!tone(TONE_WALL, TONE_DURATION)
		end
		
		// Check top wall
		var pad_top_dist : Double = (ball_y-BALL_SIZE/2) - TOP
		if (pad_top_dist <= 0) do
			// Reflect off wall
			ball_dy = -ball_dy
			ball_y = ball_y - pad_top_dist
			// Play sound
			Sound!tone(TONE_WALL, TONE_DURATION)
		end
	end
	
	function reflectBallOffPaddle(pad_pos : Double, pad_dy : Double) do
		// TODO: More added speed here at the corners
		ball_dx = -ball_dx
		ball_dy = ball_dy + pad_dy/2
	end

	statechart SC init INIT {
		state INIT {
			on entry display!create(XDISPSIZE, YDISPSIZE)
			
			transition -> SPLASH event display?displayReady action do
				initColors()
				drawBackground()
				display!update()
			end
		}
		
		state SPLASH {
			property countdown : Integer = 3
			
			on entry do
				display!drawThingML(25,40,false)
				drawPong(26,54)
				display!update()
				clock!timer_start(0,1000)
			end
			
			internal event e : clock?timer_timeout
			guard (e.id == 0 and countdown > 0)
			action do
				display!drawInteger(72,90,countdown,1,4)
				display!update()
				countdown = countdown-1
				clock!timer_start(0,1000)
			end
			
			transition -> PLAY
			event e : clock?timer_timeout
			guard (e.id == 0 and countdown == 0)
		}
		
		composite state PLAY init PLAYING {
			state PLAYING {
				on entry do
					drawBackground()
					drawWalls()
					display!drawThingMLSmall(50,3,false)
					drawPad(pad_left_x, pad_left_y)
					drawPad(pad_right_x, pad_right_y)
					drawBall()
					drawScores()
					display!update()
					
					clock!timer_start(1,PERIOD)
				end
			
				internal event e : clock?timer_timeout
				guard (e.id == 1)
				action do
					// Erase previously drawn elements
					erasePad(pad_left_x, pad_left_y)
					erasePad(pad_right_x, pad_right_y)
					eraseBall()
					
					// Re-draw portion of dashed where the ball was
					var x : Double = XDISPSIZE*SCALE/2-1*SCALE
					if (ball_x-BALL_SIZE/2 >= x-BALL_SIZE and ball_x+BALL_SIZE/2 <= x+1*SCALE+BALL_SIZE) do
						display!setColor(fgcolor[0],fgcolor[1],fgcolor[2])
						var y : Double = TOP+2*SCALE
						while (y < BOTTOM-2*SCALE) do
							if (y >= ball_y-BALL_SIZE/2-2*SCALE and y <= ball_y+BALL_SIZE/2+2*SCALE) do
								fillScaledRect(x, y, 1*SCALE, 2*SCALE)
							end
							y = y + 4*SCALE
						end
					end
					
					// Update position of elements
					updatePadPositions()
					updateBallPositionAndCheckCollision()
					
					// Draw new elements
					drawPad(pad_left_x, pad_left_y)
					drawPad(pad_right_x, pad_right_y)
					drawBall()
					
					// Done
					display!update()
					
					if (left_pad_miss) do
						pad_right_score ++
						Scores!Point(false)
					end else if (right_pad_miss) do
						pad_left_score ++
						Scores!Point(true)
					end else do
						clock!timer_start(1,PERIOD)
					end
				end
				
				transition -> LOST_BALL
				event Scores?Point
				guard (pad_left_score < SCORE_TO_WIN and pad_right_score < SCORE_TO_WIN)
			}
			
			state LOST_BALL {
				property countdown : Integer
				
				on entry do
					// Reset the countdown
					countdown = 3
					
					// Move ball to center, and point towards the winner
					eraseBall()
					ball_x = (LEFT+RIGHT)/2
					ball_y = (TOP+BOTTOM)/2
					ball_dy = 0
					if (left_pad_miss) do
						ball_x = ball_x + BALL_INITIAL_OFFSET
						ball_dx = BALL_INITIAL_SPEED
					end else do
						ball_x = ball_x - BALL_INITIAL_OFFSET
						ball_dx = -BALL_INITIAL_SPEED
					end
					drawBall()
					
					drawScores()
					
					display!update()
					clock!timer_start(1,PERIOD)
					clock!timer_start(0,1000)
				end
				
				// Countdown to re-start game
				internal event e : clock?timer_timeout
				guard (e.id == 0 and countdown > 0)
				action do
					display!drawInteger(73,90,countdown,1,4)
					display!update()
					countdown = countdown-1
					clock!timer_start(0,1000)
				end
				
				transition -> PLAYING
				event e : clock?timer_timeout
				guard (e.id == 0 and countdown == 0)
				action do
					left_pad_miss = false
					right_pad_miss = false
				end
				
				// Continue to move pads while countdown is running
				internal event e : clock?timer_timeout
				guard (e.id == 1)
				action do
					erasePad(pad_left_x, pad_left_y)
					erasePad(pad_right_x, pad_right_y)
					
					updatePadPositions()
					
					drawPad(pad_left_x, pad_left_y)
					drawPad(pad_right_x, pad_right_y)
					
					display!update()
					clock!timer_start(1,PERIOD)
				end
			}
			
			internal event e : LeftController?Velocity
			action pad_left_dy = e.dy
			
			internal event e : RightController?Velocity
			action pad_right_dy = e.dy
			
			// Game over if someone gets the score to win
			transition -> GAME_OVER
			event Scores?Point
			guard (pad_left_score == SCORE_TO_WIN or pad_right_score == SCORE_TO_WIN)
		}
		
		/*final*/ state GAME_OVER {
			on entry do
				drawScores()
				if (pad_left_score > pad_right_score) do
					display!drawTrophy(14,67)
					display!drawPoop(94,73)
				end else do
					display!drawPoop(14,73)
					display!drawTrophy(94,67)
				end
				
				display!update()
				
			end
		}
	}
}
